#import "user.graphqls"

type Product {
    Id: ID!
    Name: String!
    Description: String!
    Quantity: Int!
    Price:  Float!
    Category: Category!
}

# TODO: New Discount requirement
# 1. Able to add discounts in festive season with particular code or badge ( diwali sale etc. )
# 2. Discount should be deleted after specified time and no badge should be displayed.
# 3. Calculate price of cart and all this based on discounts only.

type Category {
    Id: ID!
    Name: String!
    Products: [Product!]!
}

input Pagination {
    first: Int!
    offset: Int!
}

type Query {
    GetProducts(Pagination: Pagination): [Product!]!
    GetProduct(id: ID!): Product!

    getCategories(Pagination: Pagination): [Category]!
    getCategory(id: ID!): Category!

    # authenticated routes
    GetAllUsers(authToken: String!): [User!]!
    GetUser(authToken: String!): User!
}

input UpdateProduct {
    name: String 
    description: String 
    quantity: Int
    price:  Float
    categoryId: String
}

input UpdateCategory {
    name: String
}

input RegisterUser {
    name: String! 
    emailId: String!
    phoneNumber: String!
    address: AddressInput!
    password: String!
}

# take either email id or password.
input SignInUserByEmail {
    emailId: String!
    password: String!
}

input SignInUserByOTP {
    phoneNumber: String!
    oneTimePassword: String!
}

type Mutation {
    # admin only
    CreateProduct(name: String!, description: String!, price: Float!, quantity: Int!, Category: ID!, authToken: String!): Product!
    CreateCategory(name: String!, authToken: String!): Category!
    UpdateProduct(id: ID!, product: UpdateProduct!, authToken: String!):Product!
    UpdateCategory(id: ID!, category: UpdateCategory!, authToken: String!):Category!

    # give whole User with auth token
    RegisterUser(user: RegisterUser!): User!
    SignInUserByEmail(user: SignInUserByEmail!): User!
    SignInUserByOTP(user: SignInUserByOTP!): User!
    VerifyUserEmail(authToken: String!): User!
}