package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"
	"graphql_search/graph/model"
	"graphql_search/models"
)

// Products is the resolver for the Products field.
func (r *categoryResolver) Products(ctx context.Context, obj *models.Category) ([]*models.Product, error) {
	// get all products in given category.
	return r.Api.CategoryApi.GetProductsByCategory(ctx, obj)
}

// CreateProduct is the resolver for the CreateProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, name string, description string, price float64, quantity int, category string, authToken string) (*models.Product, error) {
	return r.Api.ProductApi.Create(ctx, name, description, price, quantity, category)
}

// CreateCategory is the resolver for the CreateCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, name string, authToken string) (*models.Category, error) {
	return r.Api.CategoryApi.Create(ctx, name)
}

// UpdateProduct is the resolver for the UpdateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, product model.UpdateProduct, authToken string) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - UpdateProduct"))
}

// UpdateCategory is the resolver for the UpdateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, category model.UpdateCategory, authToken string) (*models.Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - UpdateCategory"))
}

// RegisterUser is the resolver for the RegisterUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, user model.RegisterUser) (*models.User, error) {
	return r.Api.UserApi.RegisterUser(ctx, user)
}

// SignInUserByEmail is the resolver for the SignInUserByEmail field.
func (r *mutationResolver) SignInUserByEmail(ctx context.Context, user model.SignInUserByEmail) (*models.User, error) {
	return r.Api.UserApi.SignInUserByEmail(ctx, user)
}

// SignInUserByOtp is the resolver for the SignInUserByOTP field.
func (r *mutationResolver) SignInUserByOtp(ctx context.Context, user model.SignInUserByOtp) (*models.User, error) {
	panic(fmt.Errorf("not implemented: SignInUserByOtp - SignInUserByOTP"))
}

// VerifyUserEmail is the resolver for the VerifyUserEmail field.
func (r *mutationResolver) VerifyUserEmail(ctx context.Context, authToken string) (*models.User, error) {
	return r.Api.UserApi.VerifyUserEmail(ctx, authToken)
}

// Category is the resolver for the Category field.
func (r *productResolver) Category(ctx context.Context, obj *models.Product) (*models.Category, error) {
	return r.Api.CategoryApi.Get(ctx, obj.Category.ID)
}

// GetProducts is the resolver for the GetProducts field.
func (r *queryResolver) GetProducts(ctx context.Context, pagination *models.Pagination) ([]*models.Product, error) {
	return r.Api.ProductApi.GetAll(ctx, pagination)
}

// GetProduct is the resolver for the GetProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*models.Product, error) {
	return r.Api.ProductApi.Get(ctx, id)
}

// GetCategories is the resolver for the getCategories field.
func (r *queryResolver) GetCategories(ctx context.Context, pagination *models.Pagination) ([]*models.Category, error) {
	// We don't need pagination for categories.
	return r.Api.CategoryApi.GetAll(ctx, nil)
}

// GetCategory is the resolver for the getCategory field.
func (r *queryResolver) GetCategory(ctx context.Context, id string) (*models.Category, error) {
	return r.Api.CategoryApi.Get(ctx, id)
}

// GetAllUsers is the resolver for the GetAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context, authToken string) ([]*models.User, error) {
	return nil, nil
}

// GetUser is the resolver for the GetUser field.
func (r *queryResolver) GetUser(ctx context.Context, authToken string) (*models.User, error) {
	return r.Api.UserApi.GetUser(ctx, authToken)
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type productResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
